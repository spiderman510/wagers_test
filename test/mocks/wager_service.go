// Code generated by mockery v2.1.0. DO NOT EDIT.

package mocks

import (
	entity "wagers/internal/entity"
	errors "wagers/internal/errors"

	mock "github.com/stretchr/testify/mock"
)

// WagerService is an autogenerated mock type for the WagerService type
type WagerService struct {
	mock.Mock
}

// BuyWager provides a mock function with given fields: request
func (_m *WagerService) BuyWager(request *entity.BuyRequest) (*entity.Purchase, *errors.Errors) {
	ret := _m.Called(request)

	var r0 *entity.Purchase
	if rf, ok := ret.Get(0).(func(*entity.BuyRequest) *entity.Purchase); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Purchase)
		}
	}

	var r1 *errors.Errors
	if rf, ok := ret.Get(1).(func(*entity.BuyRequest) *errors.Errors); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Errors)
		}
	}

	return r0, r1
}

// ListWager provides a mock function with given fields: request
func (_m *WagerService) ListWager(request *entity.ListRequest) ([]*entity.Wager, *errors.Errors) {
	ret := _m.Called(request)

	var r0 []*entity.Wager
	if rf, ok := ret.Get(0).(func(*entity.ListRequest) []*entity.Wager); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Wager)
		}
	}

	var r1 *errors.Errors
	if rf, ok := ret.Get(1).(func(*entity.ListRequest) *errors.Errors); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Errors)
		}
	}

	return r0, r1
}

// PlaceWager provides a mock function with given fields: request
func (_m *WagerService) PlaceWager(request *entity.PlaceRequest) (*entity.Wager, *errors.Errors) {
	ret := _m.Called(request)

	var r0 *entity.Wager
	if rf, ok := ret.Get(0).(func(*entity.PlaceRequest) *entity.Wager); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wager)
		}
	}

	var r1 *errors.Errors
	if rf, ok := ret.Get(1).(func(*entity.PlaceRequest) *errors.Errors); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Errors)
		}
	}

	return r0, r1
}
