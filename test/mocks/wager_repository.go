// Code generated by mockery v2.1.0. DO NOT EDIT.

package mocks

import (
	entity "wagers/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// WagerRepository is an autogenerated mock type for the WagerRepository type
type WagerRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: wg
func (_m *WagerRepository) Create(wg *entity.Wager) (*entity.Wager, error) {
	ret := _m.Called(wg)

	var r0 *entity.Wager
	if rf, ok := ret.Get(0).(func(*entity.Wager) *entity.Wager); ok {
		r0 = rf(wg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Wager) error); ok {
		r1 = rf(wg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: offset, limit
func (_m *WagerRepository) Query(offset int, limit int) ([]*entity.Wager, error) {
	ret := _m.Called(offset, limit)

	var r0 []*entity.Wager
	if rf, ok := ret.Get(0).(func(int, int) []*entity.Wager); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryById provides a mock function with given fields: wagerId
func (_m *WagerRepository) QueryById(wagerId int) (*entity.Wager, error) {
	ret := _m.Called(wagerId)

	var r0 *entity.Wager
	if rf, ok := ret.Get(0).(func(int) *entity.Wager); ok {
		r0 = rf(wagerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(wagerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: wager
func (_m *WagerRepository) Update(wager *entity.Wager) error {
	ret := _m.Called(wager)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Wager) error); ok {
		r0 = rf(wager)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
